#!/usr/bin/env python3

from dockerfile_compose import include_dockerfile
from subprocess import call
from shutil import unpack_archive
import re
from urllib.request import urlretrieve
from glob import glob
from os.path import join
from tempfile import NamedTemporaryFile

repos = {
    'nodejs/docker-node': {
        'version': 'master',
        'paths': re.compile(r'^[0-9.]+$')
    },
    'docker-library/python': {
        'version': 'master',
        'paths': re.compile(r'^[0-9.]+$')
    }
}

import os
if not os.path.exists('repos'):
    os.makedirs('repos')


def fetch_all_repos():
    for k, v in repos.items():
        version = v['version']
        url = f'https://github.com/{k}/archive/{version}.zip'
        zip_name = k.split('/')[1]
        zip = f'repos/{zip_name}-{version}.zip'
        urlretrieve(url, zip)
        unpack_archive(zip, extract_dir='repos')

def get_dockerfiles(path):
    return glob(join(path, r'*/stretch/Dockerfile'))

def get_python_dockerfiles():
    return get_dockerfiles('repos/python-{}'.format(repos['docker-library/python']['version']))

def get_node_dockerfiles():
    return get_dockerfiles('repos/docker-node-{}'.format(repos['nodejs/docker-node']['version']))



import itertools

if __name__ == '__main__':
    fetch_all_repos()
    print(get_python_dockerfiles())
    print(get_node_dockerfiles())
    for dockerfileTuple in itertools.product(get_python_dockerfiles(), get_node_dockerfiles()):
        python_version = dockerfileTuple[0].split('/')[2]
        node_version = dockerfileTuple[1].split('/')[2]
        tag = f'{python_version}-{node_version}'
        print(tag)
        tag_dir = f'dockerfiles/{tag}'
        if not os.path.exists(tag_dir):
            os.makedirs(tag_dir)

        with open(join(tag_dir, 'Dockerfile'), 'w+') as template:
            template.write('''
            # This is generated by build.py, don't edit it directly
            '''.strip())
            template.write('\n')
            template.write('FROM buildpack-deps:stretch\n')
            template.write('\n')
            with open(dockerfileTuple[0], 'r') as df:
                include_dockerfile(df, template)
            with open(dockerfileTuple[1], 'r') as df:
                include_dockerfile(df, template)
            template.write("CMD ['python3']\n")


